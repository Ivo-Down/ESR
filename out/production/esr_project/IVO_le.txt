Bom dia Sr Ivo,

antes de mais que não te desiludas comigo :( não acabei o que queria mas estive a pensar em soluções que quero falar contigo amanhã...

E vou-me deitar às 2h00 pq estou cheio de sono xd


Encontrei, por exemplo, uma pequena situação:

-> A parte do bootstrapper enviar um pacote a todos os nodos quando um determinado nodo muda o seu estado para OFF parece-me super correta;

Mas,
Os vizinhos de cada nodo são definidos através do JSON e, mesmo que não estejam ativos (state=OFF) , são colocados na tabela de
endereçamento na mesma, e o algoritmo de cálculo é, na mesma, aplicado,o que complica a minha ideia original que ia "jogar" com o estado ON.

A meu ver não fazia sentido eliminar os vizinhos OFF da tabela de endereçamento, pois penso que o stor a queira lá.

Podia fazer sentido, por exemplo, este nós estarem lá apenas para informação. Ou seja, ao dar update da tabela este só
era realmente feito nos nós vivos. Isto leva a que os nós ON estejam atualizados os nós OFF fiquem com informação desatualizada, mas nao importa
pois quando se ligarem a informação ficará atualizada.


Problemas? yes sir

i)Imaginemos que temos uma certa tabela, no nodo 03:

destinyNodeId: 2	MapValue{nextNode=2, cost=1}
destinyNodeId: 3	MapValue{nextNode=3, cost=0}
destinyNodeId: 4	MapValue{nextNode=4, cost=1}
destinyNodeId: 5	MapValue{nextNode=5, cost=1}

ii)Então de seguida o nodo 05 vai à vida;

iii) Bootstrapper envia sinal ao nodo 03;

iv) O que fazer?
	.) eliminar o 5 na tabela não me parece boa prática pois penso que é sempre bom termos todos os vizinhos, estando ON ou OFF;
	..) se não eliminarmos, este tem que sofrer alguma alteração pois, caso contrário, vai ser sempre usado pelo método de update;

Pseudo-solução? Sinalizar o nodo que ficou OFF de alguma forma na tabela. Seja atribuir um custo <0, uma pequena flag...
tudo para que quando se for a dar update à tabela, se vá buscar os vizinhos mas, para o cálculo em si, aplica-se um filter pela flag..


Sorry se a ideia for estúpida :(

Até já,

o teu amigo Zé.

